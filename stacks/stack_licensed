#!/usr/bin/env bash
export DEBUG=1
if [[ -n ${DEBUG-} ]]; then 
  set -x
fi

set -o pipefail  # trace ERR through pipes
set -o errtrace  # trace ERR through 'time command' and other functions
set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable
set -o errexit   ## set -e : exit the script if any statement returns a non-true return value

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" # http://stackoverflow.com/questions/59895
cd $DIR

. stack_run.sh  # gives us `stack_run_batch`
export LD_LIBRARY_PATH="${HOME}/pkg/lib:${HOME}/servers/shibboleth/lib"

. $DIR/../setenv.sh

if [[ ! -d ~/python ]]; then
  virtualenv-2.7 ~/python
fi

set +u
. ~/python/bin/activate
set -u

../roll_test_certs

which pip
which python
pip install lxml
if [[ -d ~/python/lib64/python2.7/dist-packages/lxml ]];
  then
    mv ~/python/lib64/python2.7/dist-packages/lxml* \
      ~/python/lib64/python2.7/site-packages/
fi
pip install twill
pip install netaddr
pip install staller
python -c 'import lxml'
mkdir -p ${HOME}/java
jpache --prefix=${HOME}/java -f

# okay, now we should have a good stack set up, let's install and configure the app!
cd ../ansible
pip install -r requirements.txt --use-mirrors
if [[ -d ~/python/lib64/python2.7/dist-packages/yaml ]];
  then
    mv ~/python/lib64/python2.7/dist-packages/* \
      ~/python/lib64/python2.7/site-packages/
fi

ansible-playbook -i host_inventory licensed-playbook.yml
cd
ln -f -s appstrap/bashrc/role-account .bashrc
